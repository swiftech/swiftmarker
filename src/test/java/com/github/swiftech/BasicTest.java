package com.github.swiftech;import com.github.swiftech.swiftmarker.Logger;import com.google.gson.Gson;import com.google.gson.JsonObject;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;/** * @author swiftech 2018-06-20 **/public class BasicTest extends BaseResourceTest{    @BeforeEach    public void setup() {        log.setLevel(Logger.LEVEL_DEBUG);        config.setDebugLevel(Logger.LEVEL_DEBUG);        engine.setConfig(config);    }    @AfterEach    public void teardown() {//        super.processContext.printAllMessages();    }    @Test    public void testBasic() {        engine.setTemplate(loadTemplate("simple/basic"));        JsonObject jsonObject = new JsonObject();        JsonObject sub = new JsonObject();        sub.addProperty("word1", "anger");        sub.addProperty("word2", "hate");        jsonObject.add("yoda", sub);        String s = super.processWithContext(jsonObject);        super.assertRender("simple/basic", s);        log.data(s);    }    @Test    public void testBasicIndex() {        String s = super.runFromResourceAndAssert("simple/basic_index");        log.data(s);    }    @Test    public void testBasicByObject() {        engine.setTemplate(loadTemplate("simple/basic"));        Object o = new Object() {            final Object yoda = new Object() {                final String word1 = "anger";                final String word2 = "hate";            };        };        String s = super.processWithContext(o);        log.data(s);    }    @Test    public void testWrongBasic() {        engine.setTemplate(loadTemplate("simple/basic"));        String json = "{\n" +                "  \"yoda\": {\n" +                "      \"word1\": \"anger\"" +                "  }\n" +                "}";        String s = super.processWithContext(new Gson().fromJson(json, JsonObject.class));        log.data(s);    }    @Test    public void testBlankLines() {        engine.setTemplate("aaa\nbbb\n\nccc\n\n\nddd\n");        JsonObject jsonObject = new Gson().fromJson("{}", JsonObject.class);        String s = super.processWithContext(jsonObject);        log.data(s);    }    /**     * 测试配置参数 {@link com.github.swiftech.swiftmarker.Config}.renderExpressionIfValueIsBlank     */    @Test    public void testBlankValue() {        config.setRenderExpressionIfValueIsBlank(false);        String s = super.runFromResourceAndAssert("simple/basic", "simple/basic_blank_value", "simple/basic_blank_value");        log.data(s);        log.data(s);    }}